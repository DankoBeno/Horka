#define WIN32_LEAN_AND_MEAN
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <windows.h>

using namespace std;

void clearConsole() {
    HANDLE hStdOut;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    DWORD count;
    DWORD cellCount;
    COORD homeCoords = { 0, 0 };

    hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
    if (hStdOut == INVALID_HANDLE_VALUE) return;

    if (!GetConsoleScreenBufferInfo(hStdOut, &csbi)) return;
    cellCount = csbi.dwSize.X * csbi.dwSize.Y;

    if (!FillConsoleOutputCharacter(
        hStdOut,
        (TCHAR)' ',
        cellCount,
        homeCoords,
        &count
    )) return;

    if (!FillConsoleOutputAttribute(
        hStdOut,
        csbi.wAttributes,
        cellCount,
        homeCoords,
        &count
    )) return;

    SetConsoleCursorPosition(hStdOut, homeCoords);
}

string getRandomWord(const vector<string>& words, int minLength, int maxLength) {
    vector<string> filteredWords;
    for (const string& word : words) {
        if (word.length() >= minLength && word.length() <= maxLength) {
            filteredWords.push_back(word);
        }
    }
    srand(time(0));
    int index = rand() % filteredWords.size();
    return filteredWords[index];
}

bool containsChar(const string& word, char guess) {
    return word.find(guess) != string::npos;
}

string drawHangman(int neuhadol) {
    string hangman;
    if (neuhadol == 1) {
        hangman = "  ____\n |    |\n |\n |\n |\n_|_\n";
        hangman = "  ____\n ║    |\n ║\n ║\n ║\n_║_\n";
    }
    else if (neuhadol == 2) {
        hangman = "  ____\n ║    |\n ║    O\n ║\n ║\n_║_\n";
    }
    else if (neuhadol == 3) {
        hangman = "  ____\n ║    |\n ║    O\n ║\n ║\n_║_\n";
    }
    else if (neuhadol == 4) {
        hangman = "  ____\n |    |\n |    O\n |   /|\n |\n_|_\n";
    }
    else if (neuhadol == 5) {
        hangman = "  ____\n |    |\n |    O\n |   /|\\\n |\n_|_\n";
    }
    else if (neuhadol == 6) {
        hangman = "  ____\n |    |\n |    O\n |   /|\\\n |   /\n_|_\n";
    }
    else if (neuhadol == 7) {
        hangman = "  ____\n |    |\n |    O\n |   /|\\\n |   / \\\n_|_\n";
    }
    return hangman;
}

void displayWord(const string& word, const vector<char>& guessedChars) {
    for (char letter : word) {
        if (find(guessedChars.begin(), guessedChars.end(), letter) != guessedChars.end()) {
            cout << letter << " ";
        }
        else {
            cout << "_ ";
        }
    }
    cout << endl;
}

bool alreadyGuessed(char guess, const vector<char>& usedLetters) {
    return find(usedLetters.begin(), usedLetters.end(), guess) != usedLetters.end();
}

int main() {
    vector<string> words = { "pes", "macka", "auto", "interpunkcia", "hrnec", "kvety", "strom" };

    while (true) {
        clearConsole(); // Clear the console screen

        cout << "\t\t  _____________________________________  \n"
            "\t\t |              HLAVNE MENU            | \n"
            "\t\t |             -------------           | \n"
            "\t\t |     --XX---              ---XX--    | \n"
            "\t\t |       :      ~Obesenec~      :      | \n"
            "\t\t |       :                      :      | \n"
            "\t\t |       O      1.  Hrat        O      | \n"
            "\t\t |      /|\\                    /|\\     | \n"
            "\t\t |      / \\    2.  Pravidla    / \\     | \n"
            "\t\t |                                     | \n"
            "\t\t |              3.  Odist              | \n"
            "\t\t |_____________________________________| \n\n\n";

        char choice;
        cout << "Vyber moznost: ";
        cin >> choice;
        switch (choice) {
        case '1': {
            int minLength, maxLength;
            char levelChoice;

            cout << "Obtiaznosti:" << endl;
            cout << "   1 - Lahka uroven (4 pismena)" << endl;
            cout << "   2 - Stredna uroven (5-6 pismen)" << endl;
            cout << "   3 - Tazka uroven (7-12 pismen)" << endl;
            cout << "Vyber obtiaznost: ";
            cin >> levelChoice;

            while (!(levelChoice >= '1' && levelChoice <= '3')) {
                cout << "Neplatna volba. Zadajte prosim znova: ";
                cin >> levelChoice;
            }
            switch (levelChoice) {
            case '1':
                minLength = maxLength = 4;
                break;
            case '2':
                minLength = 5;
                maxLength = 6;
                break;
            case '3':
                minLength = 7;
                maxLength = 12;
                break;
            }
            clearConsole(); // Clear the console screen
            string wordToGuess = getRandomWord(words, minLength, maxLength);

            const int maxAttempts = 7;
            int neuhadol = 0;
            vector<char> guessedChars;
            vector<char> usedLetters;

            cout << "Vitej v hre Obesenec!" << endl;
            cout << "Skus uhadnut skryte slovo." << endl;

            while (neuhadol < maxAttempts) {
                clearConsole(); // Clear the console screen
                cout << drawHangman(neuhadol) << endl;
                displayWord(wordToGuess, guessedChars);

                if (!guessedChars.empty()) {
                    cout << "Hadane pismena: ";
                    for (char letter : guessedChars) {
                        cout << letter << " ";
                    }
                    cout << endl;
                }

                cout << "Hadaj pismeno: ";
                char guess;
                cin >> guess;
                cout << endl;

                if (containsChar(wordToGuess, guess)) {
                    cout << "Pismeno v slove je :)" << endl;
                }
                else if (alreadyGuessed(guess, usedLetters)) {
                    cout << "Toto pismeno si uz mal!" << endl;
                }
                else {
                    cout << "Pismeno v slove nie je :(" << endl;
                    usedLetters.push_back(guess);
                    neuhadol++;
                }

                guessedChars.push_back(guess);
                bool foundAllLetters = true;
                for (char letter : wordToGuess) {
                    if (find(guessedChars.begin(), guessedChars.end(), letter) == guessedChars.end()) {
                        foundAllLetters = false;
                        break;
                    }
                }
                if (foundAllLetters) {
                    cout << "Gratulujem! Uhadol si skryte slovo: " << wordToGuess << endl;
                    break;
                }
            }
            if (neuhadol >= maxAttempts) {
                cout << drawHangman(neuhadol) << endl;
                cout << "Neuhadol si! Skryte slovo bolo: " << wordToGuess << endl;
            }
            break;
        }
        case '2':
            clearConsole(); // Clear the console screen
            cout << "Welcome to Hangman!" << endl;
            cout << "1. You have to guess the hidden word by making 7 incorrect guesses." << endl;
            cout << "2. The hidden word will be displayed with blanks for each letter." << endl;
            cout << "3. Guess one letter at a time." << endl;
            cout << "4. If your guessed letter is in the hidden word, it will be revealed." << endl;
            cout << "5. If your guessed letter is not in the hidden word, your incorrect guesses will be counted." << endl;
            cout << "6. You win the game if you guess all the letters in the hidden word before making 7 incorrect guesses." << endl;
            cout << "7. You lose the game if you make 7 incorrect guesses before guessing all the letters in the hidden word." << endl;
            break;
        case '3':
            cout << "Exiting the game. Goodbye!" << endl;
            exit(0);
        default:
            cout << "Invalid choice. Please select again." << endl;
        }

        cout << "\n\nPress Enter to continue...";
        cin.ignore();
        cin.get();
    }

    return 0;
}
